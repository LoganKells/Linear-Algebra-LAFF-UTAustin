function [y_out] = Trmvp_un_unb_var2(U, x, y)
% TRMVP_UN_UNB_VAR2
% TRMVP UN UNB VAR2 = [TR]iangular [M]atrix-[V]ector multiply [P]lus y, 
% with [U]pper triangular matrix that is [N]ot trans-posed, [UNB]locked
% [VAR]iant [2]

% This method calculates a matrix-vector multiplication y_out = Ax + y with
% efficiency gain by assuming A is an upper triangular matrix (A->U is
% upper triangular matrix).

% The matrix U is sliced by rows and columns into sub-matrices
% and vectors prior to calculating the vector-alpha scalar of U_slice * chi1.

% NOTE: The following code was created using the SPARK code generator.
% http://edx-org-utaustinx.s3.amazonaws.com/UT501x/Spark/index.html

% NOTE: You can review a visualization of this algorithm by copying the
% code to this applicaiton.
% http://edx-org-utaustinx.s3.amazonaws.com/UT501x/PictureFLAME/PictureFLAME.html

% UT Austin Linear Algebra: Foundations to Frontiers (http://www.ulaff.net)
% LAFF Homework 4.3.2.1
% Date: 11/28/2020
% Created by: Logan Kells

  [ UTL, UTR, ...
    UBL, UBR ] = FLA_Part_2x2( U, ...
                               0, 0, 'FLA_TL' );
  [ xT, ...
    xB ] = FLA_Part_2x1( x, ...
                         0, 'FLA_TOP' );
  [ yT, ...
    yB ] = FLA_Part_2x1( y, ...
                         0, 'FLA_TOP' );
                     
  while ( size( UTL, 1 ) < size( U, 1 ) )
    [ U00,  u01,       U02,  ...
      u10t, upsilon11, u12t, ...
      U20,  u21,       U22 ] = FLA_Repart_2x2_to_3x3( UTL, UTR, ...
                                                      UBL, UBR, ...
                                                      1, 1, 'FLA_BR' );
    [ x0, ...
      chi1, ...
      x2 ] = FLA_Repart_2x1_to_3x1( xT, ...
                                    xB, ...
                                    1, 'FLA_BOTTOM' );
    [ y0, ...
      psi1, ...
      y2 ] = FLA_Repart_2x1_to_3x1( yT, ...
                                    yB, ...
                                    1, 'FLA_BOTTOM' );
    %------------------------------------------------------------%
    % Calculate alpha*x + y operations; where alpha=chi1.
    
    y0 = laff_scal(chi1, u01) + y0;
    psi1 = laff_scal(chi1, upsilon11) + psi1;
    
    % Commented out the next operation because u21 is assumed to be zeros
    % vector based on U being an upper triangular matrix.
    % y2 = laff_scal(chi1, u21) + y2;
    %------------------------------------------------------------%

    [ UTL, UTR, ...
      UBL, UBR ] = FLA_Cont_with_3x3_to_2x2( U00,  u01,       U02,  ...
                                             u10t, upsilon11, u12t, ...
                                             U20,  u21,       U22, ...
                                             'FLA_TL' );
    [ xT, ...
      xB ] = FLA_Cont_with_3x1_to_2x1( x0, ...
                                       chi1, ...
                                       x2, ...
                                       'FLA_TOP' );
    [ yT, ...
      yB ] = FLA_Cont_with_3x1_to_2x1( y0, ...
                                       psi1, ...
                                       y2, ...
                                       'FLA_TOP' );
  end
  y_out = [ yT
            yB ];
return

