function [y_out] = Mvmult_n_unb_var2B(A, x, y)
fprintf("LAFF Homework 4.2.3.1\n");
fprintf("MVMULT_N_UNB_VAR2B - See LAFF figure 4.2 (http://www.ulaff.net).\n");

% MVMULT_N_UNB_VAR2B = [M]atrix-[V]ector [MULT]iply that is [N]ot trans-posed, 
% [UNB]locked [VAR]iant [2B].

% This method calculates a matrix-vector multiplication y_out = Ax + y.
% var2B utilizes an algorithm that slices the matrix into columns
% are used in the loop which calculates using laff_scal (vector * scalar)

% NOTE: The following code was created using the SPARK code generator.
% http://edx-org-utaustinx.s3.amazonaws.com/UT501x/Spark/index.html

% NOTE: You can review a visualization of this algorithm by copying the
% code to this applicaiton.
% http://edx-org-utaustinx.s3.amazonaws.com/UT501x/PictureFLAME/PictureFLAME.html

% UT Austin Linear Algebra: Foundations to Frontiers (http://www.ulaff.net)
% LAFF Homework 4.2.3.1
% Date: 11/27/2020
% Created by: Logan Kells

[ ATL, ATR, ...
  ABL, ABR ] = FLA_Part_2x2( A, ...
                               0, 0, 'FLA_TL' );

[ xT, ...
  xB ] = FLA_Part_2x1( x, ...
                         0, 'FLA_TOP' );

[ yT, ...
  yB ] = FLA_Part_2x1( y, ...
                         0, 'FLA_TOP' );

  while ( size( ATL, 1 ) < size( A, 1 ) )

    [ A00,  a01,     A02,  ...
      a10t, alpha11, a12t, ...
      A20,  a21,     A22 ] = FLA_Repart_2x2_to_3x3( ATL, ATR, ...
                                                    ABL, ABR, ...
                                                    1, 1, 'FLA_BR' );

    [ x0, ...
      chi1, ...
      x2 ] = FLA_Repart_2x1_to_3x1( xT, ...
                                    xB, ...
                                    1, 'FLA_BOTTOM' );

    [ y0, ...
      psi1, ...
      y2 ] = FLA_Repart_2x1_to_3x1( yT, ...
                                    yB, ...
                                    1, 'FLA_BOTTOM' );

    %------------------------------------------------------------%
    % Calculate according to LAFF Figure 4.2 (http://www.ulaff.net).
    % NOTE: Column vector is utilized.
    % Calculate a*x + y for the top slice, a01, of the A matrix column.
    y0 = laff_scal(chi1, a01) + y0;
    % calculate alpha*chi + psi for the middle scalars.
    psi1 = laff_scal(chi1, alpha11) + psi1;
    % calculate a*x + y for the bottom slice, a21, of the A matrix column.
    y2 = laff_scal(chi1, a21) + y2;
    %------------------------------------------------------------%

    [ ATL, ATR, ...
      ABL, ABR ] = FLA_Cont_with_3x3_to_2x2( A00,  a01,     A02,  ...
                                             a10t, alpha11, a12t, ...
                                             A20,  a21,     A22, ...
                                             'FLA_TL' );

    [ xT, ...
      xB ] = FLA_Cont_with_3x1_to_2x1( x0, ...
                                       chi1, ...
                                       x2, ...
                                       'FLA_TOP' );

    [ yT, ...
      yB ] = FLA_Cont_with_3x1_to_2x1( y0, ...
                                       psi1, ...
                                       y2, ...
                                       'FLA_TOP' );

  end
  y_out = [ yT
            yB ];
return

